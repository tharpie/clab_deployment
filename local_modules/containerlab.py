
# Copyright: (c) 2018, Terry Jones <terry.jones@example.org>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

ANSIBLE_METADATA = {
    'metadata_version': '0.1',
    'status': ['preview'],
    'supported_by': 'me'
}

DOCUMENTATION = '''
---
module: clab_deployment

short_description: used to generate a topology based on clab_deployment project

version_added: "3.10.12"

description:
    - "This module will run locally and generate a .yml file for containerlab to deploy"

options:
    dest:
        description:
            - this parameter can be used to specify the destination filename
            - Default is ./clab-project-topology.yml
        required: false

author:
    - Matthew Tharp (@tharpie)
'''

EXAMPLES = '''
# generate containerlab deployment topology
- name: generate containerlab topology 
  clab_deployment:

# generate containerlab deployment topology
- name: generate containerlab topology to specified destination
  clab_deployment:
    dest: '/home/user1/different-topology-name.yml'
'''

RETURN = '''
destination_fname:
    description: path of topology file that is generated by module
    type: str
    returned: always
topology_dict:
    description: return dict of generated topology
    type: dict
    returned: always
'''

from ansible.module_utils.basic import AnsibleModule

def run_module():
    # define available arguments/parameters a user can pass to the module
    import os
    import sys
    sys.path.append( sys.os.environ['CONTAINERLAB_PYTHON_LIBS'] )

    import clab_inventory

    cwd = os.getcwd()
    dest_path = f'{cwd}/clab-deployment-topology.yml'

    module_args = dict(
        dest=dict(type='str', required=False, default=dest_path),
    )
    
    result = dict(
        changed=False,
        destination_fname=dest_path,
        topology_dict=dict()
    )

    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=False
    )

    # manipulate or modify the state as needed (this is going to be the
    # part where your module will do what it needs to do)
    result['original_message'] = module.params['name']
    result['message'] = 'goodbye'

    # use whatever logic you need to determine whether or not this module
    # made any modifications to your target
    if module.params['new']:
        result['changed'] = True

    # during the execution of the module, if there is an exception or a
    # conditional state that effectively causes a failure, run
    # AnsibleModule.fail_json() to pass in the message and the result
    if module.params['name'] == 'fail me':
        module.fail_json(msg='You requested this to fail', **result)

    # in the event of a successful module execution, you will want to
    # simple AnsibleModule.exit_json(), passing the key/value results
    module.exit_json(**result)

def main():
    run_module()

if __name__ == '__main__':
    main()
